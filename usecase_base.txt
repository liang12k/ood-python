
Use case (business):
====================
use case == actor, system, system-actor value
-clearly define an actor --> value created --> sequence of transactions
-define system's behavior and interaction with actor
-**note: different from scenarios (technical interactions)

Defects:
~~~~~~~~
missing the following ... results in: ...:
-actor:
 can't tell who's getting value from interaction with system
 results in: difficult to determine classes for clients vs lower-level application services

-value proposition:
 two types:
 a. information for decision-making: actor->system interaction
 b. actions taken as result of decision-making:
 results in: can't determine the problem the software solves / what is done for actor

-interactions:
 :note: use-case emphasizes interaction with the actor
 results in: unclear how actor uses software
