
Roulette :class:Game
====================
:note: chicken-and-egg design problem between :class:Player & :class:Game
:TODO: deliverables needs :class:Player to be used
       eg: Passenger57 always bets on Black
       rework later for sophisticated hierarchy of players
       
Game overview
-------------
:class:Game responsibility is to cycle through various steps of game procedure
-active class that makes use of classes built so far
 class is longer or more complex methods
Roulette Game:
 :note: there are other procedures, this is for roulette
 -getting bets from player
 -spinning wheel
 -resolving bets
 
Single round of roulette
~~~~~~~~~~~~~~~~~~~~~~~~
1. place bets
   notify Player obj to create Bet objs (placing bets delegated by :class:Player)
   reduce Player obj's stake (amount) as part of creating Bet
2. spin wheel
   get next spin of :class:Wheel
   winning Bin obj (w); collection of individual :class:Outcome instances of winners
3. resolve all bets
   each Bet obj (b), placed by Player obj:
   a. winner: Bet 'b' Outcome is in winning Bin 'w'
      	      notify Player obj that Bet 'b' is winner, update Player obj's stake
   b. loser:  Bet 'b' Outcome is not in winning Bin 'w'
      	      notify Player obj that Bet 'b' is not a winner, update betting amount for next round

Matching algorithm
------------------
   
