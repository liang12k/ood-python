
Roulette Table class
====================
:class:Table design to hold bets
-introducing concepts behind exception handling, proper exception roles

Table overview
--------------
:class:Table has responsibility to keep Bet objs created by Player obj
-all information to evaluation conditions:
 house imposes 'table limits' on minimum/maximium amount that can be bet
-:note: betting constraints
	casinos preving 'Martingale' betting system by imposing table min & limit on each game
	usual maximum is a multiplier of minimum bet (10 to 50)
	ex: $5 min has $200 limit; $10 min has $300 limit
-money placed on Bet objs on :class:Table is 'at risk' of being lost
 (unclear where responsibility lies for determining winning/losing bets)
-winning bet:
 house pays Player obj an amount based on Outcome obj's odds & Bet amount
-losing bet:
 Player obj forfeits Bet amount

Winning vs Losing
~~~~~~~~~~~~~~~~~
timing of payment for bet from player's stake
payment to casino happens when bet is placed on table
deduct money as part of :class:Bet creation; deduct money as part of resolving wheel spin
limit player bet to their stake - deduct payment as Bet obj is created
:note:
      change to :class:Bet, :class:Player
      -don't need to compute amount lost
      -deduct money from Player obj's stake as part of creating Bet obj, not when Bet is resolved

Container implementation
~~~~~~~~~~~~~~~~~~~~~~~~
:class:Table is a collection of Bet objs (need to select a concrete class)
-bets placed in no particular order and arbitrary resolution
-bets don' have specific names
-python list allows bet varieties

Table limits
++++++++++++
