
Roulette Table class
====================
:class:Table design to hold bets
-introducing concepts behind exception handling, proper exception roles

Table overview
--------------
:class:Table has responsibility to keep Bet objs created by Player obj
-all information to evaluation conditions:
 house imposes 'table limits' on minimum/maximium amount that can be bet
-:note: betting constraints
	casinos preving 'Martingale' betting system by imposing table min & limit on each game
	usual maximum is a multiplier of minimum bet (10 to 50)
	ex: $5 min has $200 limit; $10 min has $300 limit
-money placed on Bet objs on :class:Table is 'at risk' of being lost
 (unclear where responsibility lies for determining winning/losing bets)
-winning bet:
 house pays Player obj an amount based on Outcome obj's odds & Bet amount
-losing bet:
 Player obj forfeits Bet amount

Winning vs Losing
~~~~~~~~~~~~~~~~~
timing of payment for bet from player's stake
payment to casino happens when bet is placed on table
deduct money as part of :class:Bet creation; deduct money as part of resolving wheel spin
limit player bet to their stake - deduct payment as Bet obj is created
:note:
      change to :class:Bet, :class:Player
      -don't need to compute amount lost
      -deduct money from Player obj's stake as part of creating Bet obj, not when Bet is resolved

Container implementation
~~~~~~~~~~~~~~~~~~~~~~~~
:class:Table is a collection of Bet objs (need to select a concrete class)
-bets placed in no particular order and arbitrary resolution
-bets don' have specific names
-python list allows bet varieties

Table limits
++++++++++++
checked using public method isValid()
-compares total of new prospective amount plus all existing Bet objs to table limit
 used by Player obj to evaluate potential bet prior to creating it
-illegal Bet obj by Player
 raise exception to indicate design error (handle this in unit testing)
 subclass of Exception: enough info to debug problem with Player obj's illegal bet
-check overall state of Player obj's Bet objs
 ensure table minimum is met (exception thrown otherwise)
 handle case where Player obj doesn't place a Bet doesn't hit table min check

Bet resolution
++++++++++++++
important to consider collaboration between :class:Table and game class to resolve bets
:note: roulette isn't a 'stateful' game (where wins/loss depends on game state)
-:class:Table has collection of Bet objs, each of which has specific Outcome obj
-:class:Wheel selects a Bin obj, which has a collection of Outcome objs
 all bets with winning outcome will be resolved as a winner
-multiple Outcome objs in winning Bin obj
 matched against multiple Bet objs active on :class:Table

Adding/Remove Bets
++++++++++++++++++
:class:Table contains Bet objs; Bet instances added by Player obj
-:rework: Bet objs will be removed from :class:Table by :class:Game
-resolved bet is deleted
 in roulette, all bets resolved with each spin
 in craps, multiple rounds of placing/resolving some bets, others are left in play
-Bet deletion method (will be done in :class:Game in future rework)

InvalidBet Exception design
+++++++++++++++++++++++++++
exception InvalidBet
-raised when Player obj attempts to place bet exceeding table's limit
-inherits all features of its superclass

Roulette Table design
=====================
:class:Table
contains all Bet objs created by Player obj
-there exists a table betting limit
-sum of all Player objs bets <= table limit
-assume simple Player obj in simulation

Fields
------
Table.limit
table limit; sum of Player objs bets <= this .limit

Table.bets
list of currently active Bet objs; results in either win/loss for Player obj

Constructors
------------
Table.Table()
create empty list of bets

Methods
-------
Table.isValid(self,bet) -> bool
validates this bet; True if sum(all bets) <= limit else False
Params
	bet (Bet): Bet instance to be validated

Table.placeBet(self,bet)
adds this bet to list of working bets; exception thrown using .isValid check
Params
	bet (Bet): bet instance to be validated
	raises: InvalidBet

Table.__iter__() -> iter
returns iterator over available list of Bet instances
:note: need ability to remove Bet objs from table and update list by creating copy of list (bets[:])

       returns: iterator over all bets

Table.__str__() -> str
return str repr of all current bets

Roulette Table deliverables
===========================
1. InvalidBet exception class (subclass of exception)
   no unique programming; no need for unit test
2. :class:Table
3. class to perform unit test of :class:Table
   create at least two instances of Bet objs ensuring Bet objs are correctly managed by :class:Table
   
