
:class:Bet
==========
overview
--------
Bet is an amount the player has wagered on specific Outcome

record declaration
~~~~~~~~~~~~~~~~~~
passive association among data elements
this class has responsibility for maintaining association between:
a. amount
b. Outcome
c. specific Player
-- three getters,setters for three attributes

general scenario:
1. have Player construct number of Bet instances
2. wheel spun to select winning Bin
3. each Bet objs will be checked to see if they're winners/losers
   a. winning bet: Outcome matches one in winning Bin
      	      	   return money to Player
   b. losing bet:  remove money from Player	   

Locating outcomes
~~~~~~~~~~~~~~~~~
design decision to make -?-
a. create fresh Outcome obj with each Bet
b. locate existing Outcome obj

Design decision - create or locate an Outcome
---------------------------------------------
building a bet requires: Outcome, amount

problem:
~~~~~~~~
a. create Outcome obj with a Bet?
b. locate Oucome obj in some collection or as a variable?

forces:
~~~~~~~
create Outcome obj as part of constructing a Bet obj
-violating DRY principle:
 ex:
	my_bet = Bet( Outcome("red",2), 25 )

locate an existing Outcome obj as part of creating a Bet instance
ex:
	my_bet = Bet( someSource["red"], 25 )

Solution
~~~~~~~~
get a complete Outcome from just name of outcome
-prevents repeating odds information

Consequence
~~~~~~~~~~~
a. pick a collection
   map name to complete Outcome instance; associate Bet with Outcome from name of Outcome
b. some obj needs to build collection of distinct Outcome objs
c. some obj needs to maintain collection of Outcom objs for Player in building Bets
:note: builder & maintainer as same obj == responsibilities in single place

Design decision - where to keep Outcome map
-------------------------------------------
Bet obj involves: Outcome, amount
-get an outcome from other obj containing Outcome map

Problem
~~~~~~~
what class contains mapping from name to Outcome obj for reusing reference to objs?

Forces
~~~~~~
:class:Outcome has three ways to get single Outcome instance
-multiple references to single Outcome instance

a. Global Outcome Mapping:
   :note: not a global variable
   global mapping obj to keep references to Outcome objs
   immutable obj once initial set of Outcome objs have been built
b. Outcome Factory Object:
   produces references to Outcome objs as needed
   this obj uses reference to one-and-only Outcome instance
c. :class:Outcome:
   define Outcome class to retain static mapping to each Outcome created
   static Outcome.getInstance() method
   -gets reference to one-and-only Outcome instance
   :note: limits ability to create Outcome subclasses

:class:BinBuilder - Factory design for Outcome instances
-no mapping to look up Outcome obj based on outcome name

Alternative solutions
~~~~~~~~~~~~~~~~~~~~~
a. 

