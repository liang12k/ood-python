
Roulette:
=========
http://buildingskills.itmaybeahack.com/book/oodesign-python-2.2/html/roulette/details.html

:note: American version (European version is different)

wheel: with 38 numbered bins [0,00,1-36]
table: spaces for bets
bets: 38 numbers (and addt'l options)

game begins: ball put into spinning roulette wheel, number landed on is winner
-win: same number, related wins; paid off using odds
-lose: bets collected

numbers: 1-36 colored in red, black; 0,00 in green
-red,black in arbitrary patterns and various ranges
-0,00 neither even or odd
-geometry of betting locations on table defines relationships between number bets

Bets available
~~~~~~~~~~~~~~
each bet has a payout: n:1 (n = multiplier defining the amound won based on bet amount)
-ex: 2:1 on $5 bet == $10 win; $15 sitting on table ($5 original bet & $10 addt'l winnings)

Bet types
+++++++++
inside: 38 numbers & small group of numbers (high odds)
outside: large group of numbers (low odds)

inside
******
a. straight: bet on single number (35:1)
b. split: bet on adjacent pair of numbers in row/col (17:1); 114 split combinations
c. street: three numbers in a single row (11:1); 12 rows == 12 street bets
d. corner: square of four numbers (8:1); 22 available
e. line: six number block, two adjacent street bets (5:1); 11 combinations
         -note: top two street rows are 0,00,1,2,3 (6:1)

outside
*******
-involes a group of 12-18 related numbers, exluding 0,00 (either straight or street bet)
a. any three 12-number ranges 1-12, 13-25, 25-36 (2:1)
b. three 12-number cols (2:1) odds; note all numbers in col divided by 3 has remainder value reflecting col #
c. even: red/black or two 18-number ranges 1-18 = low, 19-36 = high (1:1)

Odds and payouts
~~~~~~~~~~~~~~~~
http://buildingskills.itmaybeahack.com/book/oodesign-python-2.2/html/roulette/details.html#roul-bg-odds
:note: exercise will focus on house edge betting high/low, red/black, odd/even (47.4% winning, 50% payout)

Betting strategies
~~~~~~~~~~~~~~~~~~
:goal: exploit betting systems for simple OOD

Martingale System: base wagering amount (w), count number of losses initally 0 (c) - each loss doubles the bet
-any given spin will place amount of 'w x 2^c' on 1:1
-bet wins, reset c=0 (resetting bet to base amount 'w'); single win recoups all losses
:note: table limits applied to restrict excessive doubling of bet

Waiting: wait until number of losses have elapsed
'wait for a favorable state'
-ex: spin 7 reds, next will likely be a black

1-3-2-6 System: avoid doubling bet at each loss and hitting table limit
recoup losses by waiting for four wins in a row
1,3,2,6 sequence are multipliers to use when placing bets after winning
-each loss resets to 1
-each win advances through sequence: 1w -> 3w -> 2w -> 6w (reset after 6w)

Cancellation (Labouchere) System: betting budget allocated as series of numbers
-general sequence is 1-9
-each bet is sum of first and last:
 win cancels out first,last numbers (all numbers cleared, reset)
 loss adds the sum of first+last numbers onto end of sequence
-ex: cancellation bet of 1-9 sequence
 1+9 : win leaves 2,3,4,5,6,7,8
 2+8 : loss adds  2,3,4,5,6,7,8,10
 2+10: loss adds  2,3,4,5,6,7,8,10,12
 2+12: win leaves 3,4,5,6,7,8,10
 3+10: ....

Fibonacci + Cancellation approach:
1,1,2,3,5,8,13,21,... sequence
each loss sums previous two bets to create new bet (next number)
-easier for tracking losses
f(n)=f(n-1)+f(n-2)
