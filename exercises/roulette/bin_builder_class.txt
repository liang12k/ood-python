
Bin builder class
=================
:class:BinBuilder
overview: numerous design considerations for :class:Outcome, :class:Bin, :class:Wheel
	  high-level algorithms to group Outcome objs based on geometry of table

Bin builder overview
--------------------
enumerating each Outcome obj in 38 Bins objs
-most Bin objs contains fourteen individual Outcome objs

Builder class (design pattern)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class used to build instance of another class
-design obj that builds various Bin objs and assigns to :class:Wheel
method that enumerates contents of each of 36 number Bin objs, building individual Outcome instances
assign Outcome objs to Bin objs of Wheel instance
use number of steps to create various Outcome types
depend of :class:Wheel to assign each Outcome obj to correct Bin obj

Roulette outcomes
~~~~~~~~~~~~~~~~~
geometric rules for determining various Outcome objs
-survey table geometry then develop specific algorithms for each kind of bet
-combinations of individual numbers
-rules apply to number from [1,36] inclusive
-different,simpler set of rules for 0,00

a. split bets
   each number adjacent to two, three, or four other numbers
   four corners (1,3,34,36) only participate in two split bets
   center col numbers (5,8,11...32) each participate in four split bets
   remaining 'edge' numbers participate in three split bets
   bulk of layout (4 to 32) can be handled with simple rule to distinguish center vs edge cols
   :note: ends (1,2,3,34,35,36) are more complex

b. street bets
   each number is a member of one of twelve street bets

c. corner bets
   each number is a member of one, two, or four corner bets
   bulk of layout can be handled with rule to distinguish the col (like split bets)
   number in center col (5,8,11,...32) is a member of four corners
   ends (1,3,34,36) are members of one corner
   remaining numbers are along an edge and are memebers of two corners

d. line bets
   six numbers comprise a line
   each number is a member of one or two lines
   ends (1,2,3,34,35,36) are each part of a single line
   remaining 10 rows are each part of two lines

e. dozen bets
   each number is a member of one of three dozens
   three ranges are inclusive from [1,12],[13,24],[25,36]
   easy to associate numbers and ranges

f. column bets
   each number is a member of one of three cols
   each col has number numeric relationship
   values are: 3c+1, 3c+2, 3c+3 (0<=c<=12)

g. even-money bets
   include red/black, even/odd, high/low
   each number has three of six possible even money Outcome objs
   handling these six individual Outcome instances
   -each number 'n', individual if-statements can be used to determine which of the
    Outcome objs are associated w given Bin obj

Notes
+++++
1. Bin objs for 0,00 can be easily enumerated
2. each bin has straigh number bet Outcome obj & five Bet Outcome objs (00-0-1-2-3; pays 6:1)
3. easy,understandable names for various kinds of odds
   -define Outcome as Outcome('Number 1',35) too opaque
   -better naming Outcome('Number 1',RouletteGame.StraighBet); specific to a game

Bin Builder algorithms
----------------------
algorithms for nine kinds of bets

1. straight bets
   for all numbers 'n' where 1 <= n <= 37:
       a. create Outcome obj from number n (odds 35:1)
       b. assign Outcome obj to Bin obj 'n'
   zero
       Outcome obj from '0' (odds 35:1)
       -assign to Bin obj '0'
   double zero
       create outcome obj from '00' (odds 35:1)
       -assign to Bin obj '37'

2. split bets
   various cases: corners, edges, down-the-middle
   a. left-right pairs: the form of ( n, n+1 ); 1,4,7,...34 & 2,5,8,...35
   b. up-down pairs:	the form of ( n, n+3 ); 

   :note: same procedure below for up-down split bets (numbers 1 through 33)
   	  for each number 'n', generate 'n,n+3' split bet
	  -Outcome obj belongs to two Bin objs ('n' and 'n+3')
   all rows 'r' where 0 <= r <= 12
   a. first col number: set n <- 3r+1 (values 1,4,7,...,34)
   b. col 1-2 split: create 'n,n+1' split Outcome (odds 14:1)
   c. assign to bins: associate obj with two Bin objs ('n' and 'n+1')
   d. second col number: set n <- 3r+2 (values 2,5,8,...,35)
   e. col 2-3 split: create 'n,n+1' split Outcome obj
   f. assign to bins: associate obj to two Bin objs ('n' and 'n+1')
   
3. street bets
   generate street bets by iterating through twelve rows of layout
   for all rows 'r': 0 <= r <= 12
   a. first column number: set n <- 3r+1; create values 1,4,7,...,34
   b. street: create 'n, n+1, n+2' street Outcome obj (odds 11:1)
   c. assign to bins: associate this object to three Bin objs ('n','n+1','n+2')

4. corner bets
   various cases (corners, edges, down-the-middle)
   each corner has four numbers (n, n+1, n+3, n+4); two numbers in same row and next higher row
   generate corner bets by iterating through numbers 1,4,7,...,31 and 2,5,8,...,32
   -each number 'n', generate four corner bets 'n, n+1, n+2, n+4' corner bet
   -Outcome obj belongs to four Bin objs
   -iterate through various corners based on rows,cols
   -room for two corners within three cols of layout
    one corner starts at col 1, other corner starts at col 2
   -eleven corners within twelve rows of layout

   for all lines between rows 'r': 0 <= r < 11
   a. first col number: set r <- 3r+1 (creates values 1,4,7,...,31)
   b. col 1-2 corner: create 'n, n+1, n+3, n+4' corner Outcome obj (odds 8:1)
   c. assign to bins: associate obj to four Bin objs (n, n+1, n+3, n+4)
   d. second col number: set n <- 3r+2 (creates values 2,5,8,...,32)
   e. col 2-3 corner: create 'n, n+1, n+3, n+4' corner Outcome obj (odds 8:1)
   f. assign to bins: associate obj to four Bin objs (n, n+1, n+3, n+4)

5. line bets
   based around eleven lines between twelve rows
   -similar to street bets
   line 's' numbered [0,10] inclusive, numbers on line bet can be computed as:
   a. 3s+1, 3s+2, 3s+3, 3s+4, 3s+5, 3s+6
   Outcome obj belongs to six individual Bin objs

   for all lines between rows 'r': 0 <= r < 11
   a. first col number: n <- 3r+1 (create values 1,4,7,...,31)
   b. line: create 'n, n+1, n+2, n+3, n+4, n+5' line Outcome (odds 5:1)
   c. assign to bins: associate obj to six Bin objs (n, n+1, n+2, n+3, n+4, n+5)

6. dozen bets
   requires enumerating all twelve numbers in each of three groups

   for all dozens 'd': 0 <= d < 3
   a. create dozen: create Outcome obj for dozen d+1 (odds 2:1)
   b. for all numbers 'm': 0 <= m < 12
   c. assign to bin: associate object to Bin obj 12d+m+1

7. column bets
   requires enumerating all twelve numbers in each of three groups
   -enumeration of individual numbers in inner loop different from algorithm of dozen bets

   for all columns 'c': 0 <= c < 3
   a. create column: create Outcome obj for col c+1 (odds 2:1)
   b. for all rows: for each row 'r': 0 <= r < 12
   c. assign to bin: associate obj to Bin obj 3r+c+1

8. even-money bets
   outcome in [red,black, even,odd, high,low] all odds 1:1

   for all numbers: for each number 'n': 1 <= n < 37
   a. low:  1 <= n < 19;  associate with low  Outcome obj with Bin obj n
   b. high: 19 <= n < 37; associate with high ''' ... '''
   c. even: n % 2 == 0;   associate with even ''' ... '''
   d. odd:  n % 2 != 0;   associate with odd  ''' ... '''
   e. red:  n in  list;   associate with red  ''' ... '''
      	    list==[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
   f. black: else than red; associate with black ''' ... '''


BinBuilder design
-----------------
class BinBuilder
create Outcome objs for all 38 individual Bin obj on Roulette wheel

Constructors
~~~~~~~~~~~~
BinBuilder.__init__(self)
initializes BinBuilder

Methods
~~~~~~~
:note: separate methods to generate bets (see BinBuilder Algorithms):
       straight, split, street, corner, line, dozen, column, money, 0-&-00

BinBuilder.buildBins(self,wheel)
creates Outcome instance and uses the addOutcome() method to place each
Outcome obj in appropriate Bin obj of Wheel obj

params:
	wheel (Wheel): Wheel with bins that must be populated with Outcomes

BinBuilder deliverables
-----------------------
1. BinBuilder class
2. unit test class of BinBuilder class (invoke each methods Outcome instances create)
3. rework unit test of Wheel class (create and initialize a Wheel obj)
   -use Wheel.getBin() method to check select Bin objs for correct Outcome objs

Internationalization and Location
---------------------------------

