
Bin class
=========
design :class:Bin and examine collection classes
-collection of individual :class:Outcome objects
 collection class to contain objects

Overview
--------
roulette wheel has 38 bins (number,color)
-each bins defines number closely related winning outcomes
-:TODO: enumerate each 38 bins of wheel and each winning outcomes
-:class:Bin define and contain number of :class:Outcome objects

two bins (0,00) w few outcomes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
top 2 rows combination:
0:  00-0-1-2-3
00: 00-0-1-2-3

other 36 bins:
-stright bet (single Bin)
-split bet
-street bet
-corner bet
-line bet
-column
-dozen
-even/odd
-red/black (18 individual bins)
-high/low

Design decision - choosing a collection
---------------------------------------
ref: see base_texts/selecting_collections.txt
~~~
frozenset
-immutable set
-unique values (no duplicates)
-no inherent ordering

Q/A overview
~~~~~~~~~~~~
:class:Bin not in overall design
-more focused in :class:Wheel; 38 bins
-rework to be done

entire separate class for bins instead of array of 38 individual arrays
-improve exactness of object model of problem
-reduce complexity of :class:Wheel
-collection of :class:Outcome objects from 38 bins in :class:Wheel during :class:Game
-flexibility in assigning responsibilities later
-:class:Wheel has random number generator to select winning :class:Bin
 delegating definitions in classes

overhead on entire :class:Bin
-no overhead in class definitions
 run-time results to few simple persistent objects defining the class
 :note: class instances cause run-time overhead
-flexibility > instructions delegated to internal object

introducing collections framework not appearing in problem
-differentiate classes:
 a. users ~ uncovered during analysis of problem
 b. developers ~ part of implementation of particular solution
-collections framework part of (b.), solution
-problem-orientated classes unique to problem

Bin design
----------
:class:Bin
-contains a collection of :class:Outcome
 winning bets paid for particular bin on roulette :class:Wheel
-each wheel spin has number of outcomes
 ex: spin of '1': selects '1' bin, winning outcomes:
     	     	  '1','Red','Odd','Low','Column 1','Dozen1-12','Split1-2','Split1-4',
		  'Street1-2-3','Corner1-2-4-5','Five bet','Line1-2-3-4-5-6','00-0-1-2-3','Dozen1'

fields
~~~~~~
Bin.outcomes
-frozenset (immutable) that holds collection of individual :class:Outcome

constructors
~~~~~~~~~~~~
Bin.__init__(self,*outcomes)
params
	outcomes: any number of outcomes used to populate Bin initially
ex
	five=Outcome('00-0-1-2-3',6)
	zero=Bin(Outcome('0',35),five) # based on ref to two objs: '0','00-0-1-2-3' Outcome
	zerozero=Bin(Outcome('00',35),five) # based on ref to two objs: '00','00-0-1-2-3' Outcome

methods
~~~~~~~
Bin.add(self,outcome)
-adds Outcome object to Bin
 can be used by a builder to construct all bets in Bin
 delegate real work to underlying collection
-frozenset (immutable) constructed using '|' operator creates new frozenset from frozenset or set
 zero=Outcome('0',35)
 zerozero=Outcome('00',35)
 b=frozenset([zero]) # frozenset([<roulette.Oucome object at ...>])
 map(str,b) # ['0 (35:1)']
 b|=set([zerozero])
 map(str,b) # ['0 (35:1)','00 (35:1)']
 b # frozenset([<roulette.Outcome object at ...>,<roulette.Outcome object at ...>])
params:
	outcome (Outcome) - outcome to add to Bin

Bin.__str__(self)
easy-to-read representation of list of Outcomes in Bin
-displaying collections using ', ' separators in .join of outcomes
-implementation: ', '.join(map(str,self.outcome))
return:
	(str) - string of form [outcome, outcome, ...]

Bin deliverables
----------------
1. :class:Bin
2. class that performs unit test for :class:Bin
   -several instances of Outcome
    a. two instances of :class:Bin; sharing object references
       -Outcome obj referenced by several Bins
    b. Bin can be constructed from :class:Outcome


