
Walkthrough
-----------
possible design that will refine definitions, reasonable architecture
-with questions on preliminary design

Preliminary survey of classes
-----------------------------
identify objects and their responsbilities (encapsulation)
-isolate information/processing
-methods of class are exclusive to users of fields of the class
-loosely coupled class (easier change w/o affecting rest of application)
future enhancements
-ex: house 'rake': (viforish, vig, commission) % deduction from payouts

Class model (unified modeling language [UML])
-----------
describe relationships among various nouns (in problem statement)

Nouns
~~~~~
wheel
bet
bin
table
red
black
green
number
odds
player
house

Preliminary roulette class structure
------------------------------------
summarize classes and responsbilities identified from problem statement
-leave room for addt'l classes and rework

'uses-used by' collaborative relationships
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
outcome:
-responsibilities:
 name for bet and payout odds, isolates calculation of payout amount
 ex: 'Red','1:1'
-collaborators
 collected by 'wheel' into bins reflecting bets that win
 collected by 'table' into available bets for 'player'
 used by 'game' to compute amount won from bet amount

wheel:
-responsibilities
 selects 'outcome'-s that win; isolates use of rand number generator to select 'outcome'
 encapsulates set of winning 'outcome'-s associated w each individual number on 'wheel'
 ex: '1' bin has winning 'outcome'-s: '1','red','odd','low','column1','dozen1-12','split1-2'
				      'split1-4','street1-2-3','corner1-2-4-5','five-bet',
				      'line1-2-3-4-5-6','00-0-1-2-3','dozen1'
-collaborators
 collect 'outcome'-s into bins; used by overall 'game' to get next set of winning 'outcomes'

table:
-responsbilities
 collection of 'bet'-s placed on 'outcome'-s by 'player'
 isolates set of possible 'bet'-s and mgt of amounts current at risk on each 'bet'
 serves as interface between 'player' and other 'game' elements
-collaborators
 collects 'outcome'-s
 used by 'player' to place 'bet' amount on specific 'outcome'
 used by 'game' to compute amount won from amount that was 'bet'

player: (**important: encapsulation - updates algorithms used, different bets)
-responsbilities
 places 'bet'-s on 'outcome'-s
 updates stake with amounts won,lost
-collaborators
 uses 'table' to place 'bet'-s on 'outcome'-s
 used by 'game' to record wins,losses

game:
-responsbilities
 runs the 'game'
 gets 'bet'-s from 'player'
 spins 'wheel'
 collects losing and pays winning 'bet'-s
 encapsulates basic sequence of play into single class
-collaborators
 uses 'wheel','table','outcome','player'
 overall statistical analysis will play finite number of games
 collect final value of 'player' stake

Basic processing outline
++++++++++++++++++++++++
-see class_responsibility_collaborators.txt

class-responsibility
********************
goal: get a clear sense of responsbilities+collaborations and overview

:class:Game: 'runs the game'

1. gets 'bet'-s from :class:Player

2. does :class:Player collaborate with :class:Game to place 'bet'-s?
   :class:Player
   -has a responsibility to place 'bet'-s
   -places 'bet'-s on :class:Outcome
   -:class:Table contains amounts placed on 'bet'-s
   -collaboration present between :class:Player, :class:Table

3. does :class:Table collaborate with :class:Player to accept 'bet'-s?
   :class:Table
   -has a responsibility for amount of the 'bet'
   -**contains collection of amounts bet on :class:Outcome (amount bet is :class:Bet)

4. does :class:Bet collaborate with :class:Outcome?
   :class:Bet
   -responsibility for amount bet on :class:Outcome; pair
   -bets all kept and collected by :class:Table
   -created by :class:Player

5. does :class:Wheel collaborate with :class:Outcome?
   :class:Wheel
   -gets list of winning :class:Outcome
   -:class:Game get all :class:Bet from :class:Table
   -winning, losing results of :class:Outcome
   -:class:Game notifies :class:Player of win/lose :class:Bet

